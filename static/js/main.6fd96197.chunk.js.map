{"version":3,"sources":["components/CounterMenu/CounterMenu.module.css","components/Input/Input.module.css","components/Button/Button.tsx","reducers/counter-reducer.ts","components/Counter.tsx","components/Input/Input.tsx","reducers/counter-menu-reducer.ts","components/CounterMenu/CounterMenu.tsx","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx","components/Button/Button.module.css"],"names":["module","exports","Button","props","className","style","button","onClick","callBack","disabled","isDisabled","title","initialState","Counter","counter","useSelector","state","counterReducer","dispatch","useDispatch","counterValue","type","isIncButtonDisabled","isResetButtonDisabled","Input","styles","input","placeholder","onChange","e","digit","currentTarget","value","counterMenuReducerInitialState","CounterMenu","counterMenu","counterMenuReducer","inputsArea","newValue","setInitValueAC","initValue","setMaxValueAC","maxValue","isNumber","str","test","console","log","isValuesExist","isValidNumbers","Number","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","counterValueInt","maxValueInt","toString","store","createStore","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6fd96197.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputsArea\":\"CounterMenu_inputsArea__2ud8a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__3PNbO\"};","import React from 'react';\r\nimport style from \"./Button.module.css\"\r\n\r\ntype ButtonPropsType = {\r\n    title: string\r\n    callBack: () => void\r\n    isDisabled: boolean\r\n}\r\n\r\nexport const Button = (props: ButtonPropsType) => {\r\n    return (\r\n        <button className={style.button} onClick={() => props.callBack()} disabled={props.isDisabled}>\r\n            {props.title}\r\n        </button>\r\n    );\r\n};\r\n\r\n","type mainActionType =\r\n    incrementCounterACType\r\n    | resetCounterACType\r\n    | setCounterParametersACType\r\nexport type incrementCounterACType = ReturnType<typeof incrementCounterAC>\r\ntype resetCounterACType = ReturnType<typeof resetCounterAC>\r\ntype setCounterParametersACType = ReturnType<typeof setCounterParametersAC>\r\n\r\nexport type counterReducerInitialStateType = {\r\n    \"initValue\": string\r\n    \"maxValue\": string\r\n    \"counterValue\": string\r\n    \"isIncButtonDisabled\": boolean\r\n    \"isResetButtonDisabled\": boolean\r\n}\r\n\r\nconst initialState: counterReducerInitialStateType = {\r\n    \"initValue\": \"\",\r\n    \"maxValue\": \"\",\r\n    \"counterValue\": \"Counter need to be set\",\r\n    \"isIncButtonDisabled\": true,\r\n    \"isResetButtonDisabled\": true,\r\n};\r\n\r\nexport const counterReducer = (state: counterReducerInitialStateType = initialState, action: mainActionType) => {\r\n    switch (action.type) {\r\n        case \"INCREMENT-COUNTER\": {\r\n            let counterValueInt = Number(state.counterValue)\r\n            let maxValueInt = Number(state.maxValue)\r\n            if (counterValueInt < maxValueInt) {\r\n                if (counterValueInt + 1 === maxValueInt) {\r\n                    return {...state, counterValue: (counterValueInt + 1).toString(), isIncButtonDisabled: true}\r\n                } else {\r\n                    return {...state, counterValue: (counterValueInt + 1).toString(), isResetButtonDisabled: false}\r\n                }\r\n            }\r\n            if (state.counterValue === state.maxValue) {\r\n                return {...state, isIncButtonDisabled: true} //Пока ничего не делает\r\n            } else {\r\n                return {...state}\r\n            }\r\n        }\r\n        case \"RESET-COUNTER\": {\r\n            return {...state, counterValue: state.initValue, isIncButtonDisabled: false, isResetButtonDisabled: true}\r\n        }\r\n        case \"SET-COUNTER-PARAMETERS\": {\r\n            return {\r\n                ...state,\r\n                counterValue: action.initValue,\r\n                initValue: action.initValue,\r\n                maxValue: action.maxValue,\r\n                isIncButtonDisabled: false\r\n            }\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport const setCounterParametersAC = (initValue: string, maxValue: string) => {\r\n    return {\r\n        type: \"SET-COUNTER-PARAMETERS\",\r\n        initValue,\r\n        maxValue\r\n    }\r\n}\r\nexport const incrementCounterAC = () => {\r\n    return {\r\n        type: \"INCREMENT-COUNTER\",\r\n    } as const\r\n}\r\nexport const resetCounterAC = () => {\r\n    return {\r\n        type: \"RESET-COUNTER\",\r\n    } as const\r\n}","import React from 'react';\r\nimport {Button} from \"./Button/Button\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {rootReducerType} from \"../store/store\";\r\nimport {counterReducerInitialStateType, incrementCounterAC, resetCounterAC} from \"../reducers/counter-reducer\";\r\n\r\nexport const Counter = () => {\r\n    const counter = useSelector<rootReducerType, counterReducerInitialStateType>(state => state.counterReducer)\r\n    const dispatch = useDispatch();\r\n    const incrementCounter = () => {\r\n        dispatch(incrementCounterAC())\r\n    }\r\n    const reset = () => {\r\n        dispatch(resetCounterAC())\r\n    }\r\n\r\n    return (\r\n        <div className=\"outerBorder\">\r\n            <div className=\"counterWrap\">\r\n                <div className=\"counterDisplay\">{counter.counterValue}</div>\r\n                <div className=\"controlPanel\">\r\n                    <div className=\"controlPanelWrapper\">\r\n                        <Button title={\"Inc\"} callBack={incrementCounter} isDisabled={counter.isIncButtonDisabled}/>\r\n                        <Button title={\"Reset\"} callBack={reset} isDisabled={counter.isResetButtonDisabled}/></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, {ChangeEvent} from 'react';\r\nimport styles from \"./Input.module.css\"\r\n\r\ntype InputPropsType = {\r\n    title: string\r\n    callBack: (newValue: string) => void\r\n    value: string\r\n}\r\n\r\n\r\nexport const Input = (props: InputPropsType) => {\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let digit = e.currentTarget.value;\r\n        return props.callBack(digit)\r\n    }\r\n    return (\r\n        <input className={styles.input} type=\"text\" placeholder={props.title}\r\n               onChange={onChangeHandler} value={props.value}/>\r\n    );\r\n};\r\n\r\n","type mainActionType = setInitValueACType | setMaxValueACType;\r\ntype setInitValueACType = ReturnType<typeof setInitValueAC>\r\ntype setMaxValueACType = ReturnType<typeof setMaxValueAC>\r\n\r\nexport type counterMenuReducerInitialStateType = {\r\n    \"initValue\": string,\r\n    \"maxValue\": string,\r\n}\r\n\r\nexport const counterMenuReducerInitialState: counterMenuReducerInitialStateType = {\r\n    \"initValue\": \"\",\r\n    \"maxValue\": \"\",\r\n}\r\n\r\nexport const counterMenuReducer = (state = counterMenuReducerInitialState, action: mainActionType) => {\r\n    switch (action.type) {\r\n        case \"SET-INIT-VALUE\": {\r\n            return {...state, initValue: action.newValue}\r\n        }\r\n        case \"SET-MAX-VALUE\": {\r\n            return {...state, maxValue: action.newValue}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport const setInitValueAC = (newValue: string) => {\r\n    return {\r\n        type: \"SET-INIT-VALUE\",\r\n        newValue,\r\n    } as const\r\n}\r\nexport const setMaxValueAC = (newValue: string) => {\r\n    return {\r\n        type: \"SET-MAX-VALUE\",\r\n        newValue,\r\n    } as const\r\n}","import React from 'react';\r\nimport {Button} from \"../Button/Button\";\r\nimport styles from \"./CounterMenu.module.css\"\r\nimport {Input} from \"../Input/Input\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {rootReducerType} from \"../../store/store\";\r\nimport {setCounterParametersAC} from \"../../reducers/counter-reducer\";\r\nimport {counterMenuReducerInitialStateType, setInitValueAC, setMaxValueAC} from '../../reducers/counter-menu-reducer';\r\n\r\nexport const CounterMenu = () => {\r\n    const counterMenu = useSelector<rootReducerType, counterMenuReducerInitialStateType>(state => state.counterMenuReducer)\r\n    const dispatch = useDispatch();\r\n    const setInitValue = (newValue: string) => {\r\n        dispatch(setInitValueAC(newValue))\r\n    }\r\n    const setMaxValue = (newValue: string) => {\r\n        dispatch(setMaxValueAC(newValue))\r\n    }\r\n    const setCounterValues = () => {\r\n        function isNumber(str: string) {\r\n            return /^-?\\d+$/.test(str);\r\n        }\r\n        if(isNumber(counterMenu.initValue)&&isNumber(counterMenu.maxValue)) {\r\n            dispatch(setCounterParametersAC(counterMenu.initValue, counterMenu.maxValue))\r\n        } else {\r\n            console.log(\"Input isn't numeric\");\r\n        }\r\n    }\r\n\r\n    function isDisabled() {\r\n        let isValuesExist = !(counterMenu.initValue && counterMenu.maxValue)//counter.property!==\"\"\r\n        let isValidNumbers = Number(counterMenu.initValue) < Number(counterMenu.maxValue);\r\n        if (isValuesExist) { //Not null check\r\n            return true\r\n        } else {\r\n            return !isValidNumbers // need to return opposite bc func will be applied to button disabled\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"outerBorder\">\r\n            <div className=\"counterWrap\">\r\n                <div className={styles.inputsArea}>\r\n                    <Input title={\"Initial Value\"} callBack={setInitValue} value={counterMenu.initValue}/>\r\n                    <Input title={\"Max Value\"} callBack={setMaxValue} value={counterMenu.maxValue}/>\r\n                </div>\r\n                <div className=\"controlPanel\">\r\n                    <div className=\"controlPanelWrapper\">\r\n                        <Button title={\"Set value\"} callBack={setCounterValues} isDisabled={isDisabled()}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\nimport './App.css';\nimport {Counter} from \"./components/Counter\";\nimport {CounterMenu} from \"./components/CounterMenu/CounterMenu\";\n\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <div className={\"wrapper\"}>\n                <CounterMenu/>\n                <Counter/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"../reducers/counter-reducer\";\r\nimport {counterMenuReducer} from \"../reducers/counter-menu-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    \"counterReducer\": counterReducer,\r\n    \"counterMenuReducer\": counterMenuReducer,\r\n})\r\n\r\n\r\nexport type rootReducerType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>\n    ,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3QF_k\"};"],"sourceRoot":""}