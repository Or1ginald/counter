{"version":3,"sources":["components/CounterMenu/CounterMenu.module.css","components/Input/Input.module.css","components/Button/Button.tsx","reducers/counter-reducer.ts","components/Counter.tsx","components/Input/Input.tsx","reducers/counter-menu-reducer.ts","components/CounterMenu/CounterMenu.tsx","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx","components/Button/Button.module.css"],"names":["module","exports","Button","props","className","style","button","onClick","callBack","disabled","isDisabled","title","initialState","initValue","maxValue","counterValue","counterMessage","isIncButtonDisabled","isResetButtonDisabled","switchResetButtonAC","newState","type","Counter","useSelector","state","counterReducer","dispatch","useDispatch","console","log","Input","styles","input","placeholder","onChange","e","digit","currentTarget","value","counterMenuReducerInitialState","CounterMenu","counterMenuReducer","Number","inputsArea","newValue","setInitValueAC","setMaxValueAC","isNumber","str","test","setCounterParametersAC","message","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.07c921c0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputsArea\":\"CounterMenu_inputsArea__2ud8a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__3PNbO\"};","import React from 'react';\r\nimport style from \"./Button.module.css\"\r\n\r\ntype ButtonPropsType = {\r\n    title: string\r\n    callBack: () => void\r\n    isDisabled: boolean\r\n}\r\n\r\nexport const Button = (props: ButtonPropsType) => {\r\n    return (\r\n        <button className={style.button} onClick={() => props.callBack()} disabled={props.isDisabled}>\r\n            {props.title}\r\n        </button>\r\n    );\r\n};\r\n\r\n","type mainActionType =\r\n    incrementCounterACType\r\n    | resetCounterACType\r\n    | setCounterParametersACType\r\n    | toggleIncButtonACType\r\n    | switchResetButtonACType\r\n    | setCounterMessageACType\r\n    | setParametersNullACType\r\nexport type incrementCounterACType = ReturnType<typeof incrementCounterAC>\r\ntype resetCounterACType = ReturnType<typeof resetCounterAC>\r\ntype setCounterParametersACType = ReturnType<typeof setCounterParametersAC>\r\ntype toggleIncButtonACType = ReturnType<typeof toggleIncButtonAC>\r\ntype switchResetButtonACType = ReturnType<typeof switchResetButtonAC>\r\ntype setCounterMessageACType = ReturnType<typeof setCounterMessageAC>\r\ntype setParametersNullACType = ReturnType<typeof setParametersNullAC>\r\n\r\nexport type counterReducerInitialStateType = {\r\n    initValue: number | null\r\n    maxValue: number | null\r\n    counterValue: number | null\r\n    counterMessage: string\r\n    isIncButtonDisabled: boolean\r\n    isResetButtonDisabled: boolean\r\n}\r\nconst initialState: counterReducerInitialStateType = {\r\n    initValue: null,\r\n    maxValue: null,\r\n    counterValue: null,\r\n    counterMessage: \"Counter need to be set\",\r\n    isIncButtonDisabled: true,\r\n    isResetButtonDisabled: true,\r\n};\r\n\r\nexport const counterReducer = (state: counterReducerInitialStateType = initialState, action: mainActionType): counterReducerInitialStateType => {\r\n    switch (action.type) {\r\n        case \"INCREMENT-COUNTER\": {\r\n            if (state.counterValue) {  //state.counterValue !== null\r\n                return {...state, counterValue: state.counterValue + 1}\r\n            } else {\r\n                return {...state}\r\n            }\r\n        }\r\n        case \"RESET-COUNTER\": {\r\n            return {\r\n                ...state,\r\n                counterValue: state.initValue ? state.initValue : null,\r\n                isIncButtonDisabled: false,\r\n                isResetButtonDisabled: true\r\n            }\r\n        }\r\n        case \"TOGGLE-INC-BUTTON\": {\r\n            return {...state, isIncButtonDisabled: !state.isIncButtonDisabled}\r\n        }\r\n        case \"SWITCH-RESET-BUTTON\": {\r\n            return {...state, isResetButtonDisabled: action.newState}\r\n        }\r\n        case \"SET-COUNTER-PARAMETERS\": {\r\n            return {\r\n                ...state,\r\n                counterValue: action.initValue,\r\n                initValue: action.initValue,\r\n                maxValue: action.maxValue,\r\n                isIncButtonDisabled: false\r\n            }\r\n        }\r\n        case \"SET-PARAMETERS-TO-NULL\": {\r\n            return {\r\n                ...state,\r\n                counterValue: null,\r\n                initValue: null,\r\n                maxValue: null,\r\n                isIncButtonDisabled: true,\r\n                isResetButtonDisabled: true,\r\n            }\r\n        }\r\n        case \"SET-COUNTER-MESSAGE\": {\r\n            return {...state, counterMessage: action.message}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport const setCounterParametersAC = (initValue: number, maxValue: number) => {\r\n    return {\r\n        type: \"SET-COUNTER-PARAMETERS\",\r\n        initValue,\r\n        maxValue,\r\n    } as const\r\n}\r\n\r\nexport const setCounterMessageAC = (message: string) => {\r\n    return {\r\n        type: \"SET-COUNTER-MESSAGE\",\r\n        message,\r\n    } as const\r\n}\r\nexport const setParametersNullAC = () => {\r\n    return {\r\n        type: \"SET-PARAMETERS-TO-NULL\",\r\n    } as const\r\n}\r\n\r\nexport const incrementCounterAC = () => {\r\n    return {\r\n        type: \"INCREMENT-COUNTER\",\r\n    } as const\r\n}\r\n\r\nexport const toggleIncButtonAC = () => {\r\n    return {\r\n        type: \"TOGGLE-INC-BUTTON\"\r\n    } as const\r\n}\r\nexport const switchResetButtonAC = (newState: boolean) => {\r\n    return {\r\n        type: \"SWITCH-RESET-BUTTON\",\r\n        newState\r\n    } as const\r\n}\r\nexport const resetCounterAC = () => {\r\n    return {\r\n        type: \"RESET-COUNTER\",\r\n    } as const\r\n}\r\n","import React from 'react';\r\nimport {Button} from \"./Button/Button\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {rootReducerType} from \"../store/store\";\r\nimport {\r\n    counterReducerInitialStateType,\r\n    incrementCounterAC,\r\n    resetCounterAC, switchResetButtonAC,\r\n    toggleIncButtonAC,\r\n} from \"../reducers/counter-reducer\";\r\n\r\nexport const Counter = () => {\r\n    const {\r\n        counterValue,\r\n        maxValue,\r\n        isIncButtonDisabled,\r\n        isResetButtonDisabled, counterMessage,\r\n    } = useSelector<rootReducerType, counterReducerInitialStateType>(state => state.counterReducer)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const incrementCounter = () => {\r\n        if ((counterValue ?? 0) < (maxValue ?? 0)) {\r\n            if ((counterValue ?? 0) + 1 === maxValue) {\r\n                dispatch(toggleIncButtonAC())\r\n                dispatch(incrementCounterAC())\r\n                dispatch(switchResetButtonAC(false))\r\n\r\n            } else {\r\n                dispatch(switchResetButtonAC(false))\r\n                dispatch(incrementCounterAC())\r\n            }\r\n        } else {\r\n            return console.log(\"Что-то пошло не так\")\r\n        }\r\n    }\r\n\r\n    const reset = () => dispatch(resetCounterAC())\r\n\r\n    return (\r\n        <div className=\"outerBorder\">\r\n            <div className=\"counterWrap\">\r\n                <div className=\"counterDisplay\">{counterValue ? counterValue : counterMessage}</div>\r\n                <div className=\"controlPanel\">\r\n                    <div className=\"controlPanelWrapper\">\r\n                        <Button title={\"Inc\"} callBack={incrementCounter} isDisabled={isIncButtonDisabled}/>\r\n                        <Button title={\"Reset\"} callBack={reset} isDisabled={isResetButtonDisabled}/></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, {ChangeEvent} from 'react';\r\nimport styles from \"./Input.module.css\"\r\n\r\ntype InputPropsType = {\r\n    title: string\r\n    callBack: (newValue: string) => void\r\n    value: string\r\n}\r\n\r\n\r\nexport const Input = (props: InputPropsType) => {\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        // function isNumber(str: string) {\r\n        //     return /^-?\\d+$/.test(str);\r\n        // }\r\n\r\n        let digit = e.currentTarget.value;\r\n        return /*isNumber(digit)? */props.callBack(digit) /*: false*/\r\n    }\r\n    return (\r\n        <input className={styles.input} type=\"text\" placeholder={props.title}\r\n               onChange={onChangeHandler} value={props.value}/>\r\n    );\r\n};\r\n\r\n","type mainActionType = setInitValueACType | setMaxValueACType;\r\ntype setInitValueACType = ReturnType<typeof setInitValueAC>\r\ntype setMaxValueACType = ReturnType<typeof setMaxValueAC>\r\n\r\nexport type counterMenuReducerInitialStateType = {\r\n    initValue: string,\r\n    maxValue: string,\r\n}\r\n\r\nexport const counterMenuReducerInitialState: counterMenuReducerInitialStateType = {\r\n    initValue: \"\",\r\n    maxValue: \"\",\r\n}\r\n\r\nexport const counterMenuReducer = (state = counterMenuReducerInitialState, action: mainActionType): counterMenuReducerInitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET-INIT-VALUE\": {\r\n            return {...state, initValue: action.newValue}\r\n        }\r\n        case \"SET-MAX-VALUE\": {\r\n            return {...state, maxValue: action.newValue}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport const setInitValueAC = (newValue: string) => {\r\n    return {\r\n        type: \"SET-INIT-VALUE\",\r\n        newValue,\r\n    } as const\r\n}\r\nexport const setMaxValueAC = (newValue: string) => {\r\n    return {\r\n        type: \"SET-MAX-VALUE\",\r\n        newValue,\r\n    } as const\r\n}","import React from 'react';\r\nimport {Button} from \"../Button/Button\";\r\nimport styles from \"./CounterMenu.module.css\"\r\nimport {Input} from \"../Input/Input\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {rootReducerType} from \"../../store/store\";\r\nimport {setCounterMessageAC, setCounterParametersAC, setParametersNullAC} from \"../../reducers/counter-reducer\";\r\nimport {counterMenuReducerInitialStateType, setInitValueAC, setMaxValueAC} from '../../reducers/counter-menu-reducer';\r\n\r\nexport const CounterMenu = () => {\r\n    const {\r\n        initValue,\r\n        maxValue\r\n    } = useSelector<rootReducerType, counterMenuReducerInitialStateType>(state => state.counterMenuReducer)\r\n    const dispatch = useDispatch();\r\n\r\n    const setInitValue = (newValue: string) => dispatch(setInitValueAC(newValue))\r\n\r\n    const setMaxValue = (newValue: string) => dispatch(setMaxValueAC(newValue))\r\n\r\n    const setCounterValues = () => {\r\n        function isNumber(str: string) {\r\n            return /^-?\\d+$/.test(str);\r\n        }\r\n\r\n        if (isNumber(initValue) && isNumber(maxValue)) {\r\n            dispatch(setCounterParametersAC(Number(initValue), Number(maxValue)))\r\n\r\n        } else {\r\n            dispatch(setCounterMessageAC(\"Input isn't numeric\"))\r\n            dispatch(setParametersNullAC())\r\n        }\r\n    }\r\n\r\n    // const isDisabled = !(initValue && maxValue) ? true : ((initValue ?? 0) >= (maxValue ?? 0))\r\n    const isDisabled = !(initValue && maxValue) ? true : (Number(initValue) >= Number(maxValue)) //Need to return false to Enable button\r\n    return (\r\n        <div className=\"outerBorder\">\r\n            <div className=\"counterWrap\">\r\n                <div className={styles.inputsArea}>\r\n                    <Input title={\"Initial Value\"} callBack={setInitValue} value={initValue}/>\r\n                    <Input title={\"Max Value\"} callBack={setMaxValue} value={maxValue}/>\r\n                </div>\r\n                <div className=\"controlPanel\">\r\n                    <div className=\"controlPanelWrapper\">\r\n                        <Button title={\"Set value\"} callBack={setCounterValues} isDisabled={isDisabled}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\nimport './App.css';\nimport {Counter} from \"./components/Counter\";\nimport {CounterMenu} from \"./components/CounterMenu/CounterMenu\";\n\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <div className={\"wrapper\"}>\n                <CounterMenu/>\n                <Counter/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"../reducers/counter-reducer\";\r\nimport {counterMenuReducer} from \"../reducers/counter-menu-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    counterReducer,\r\n    counterMenuReducer,\r\n})\r\n\r\n\r\nexport type rootReducerType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>\n    ,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3QF_k\"};"],"sourceRoot":""}